{"version":3,"sources":["child1.jsx","child2.jsx","App.js","serviceWorker.js","index.js"],"names":["ErrorBoundary","props","state","error","errorInfo","this","setState","style","whiteSpace","toString","componentStack","children","React","Component","BuggyCounter","counter","handleClick","bind","Error","onClick","App","console","log","data","observable","value","handleEnd","autorun","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"mQAEMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,MAAO,KAAMC,UAAW,MAFtB,E,qDAKnB,SAAkBD,EAAOC,GAEvBC,KAAKC,SAAS,CACZH,MAAOA,EACPC,UAAWA,M,oBAKf,WACE,OAAIC,KAAKH,MAAME,UAGX,6BACE,qDACA,6BAASG,MAAO,CAAEC,WAAY,aAC3BH,KAAKH,MAAMC,OAASE,KAAKH,MAAMC,MAAMM,WACtC,6BACCJ,KAAKH,MAAME,UAAUM,iBAMvBL,KAAKJ,MAAMU,a,GA9BMC,IAAMC,WAkC5BC,E,kDACJ,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEa,QAAS,GACxB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAHF,E,+CAMnB,WACEZ,KAAKC,UAAS,kBAAgB,CAC5BS,QADY,EAAEA,QACK,Q,oBAIvB,WACE,GAA2B,IAAvBV,KAAKH,MAAMa,QAEb,MAAM,IAAIG,MAAM,cAElB,OAAO,wBAAIC,QAASd,KAAKW,aAAcX,KAAKH,MAAMa,a,GAlB3BH,IAAMC,WAgDlBO,MA1Bf,WACE,OACE,6BACE,2BACE,iFAEE,6BAAM,6BAFR,iDAIE,6BAJF,4GAQF,6BACA,kBAAC,EAAD,KACE,mJACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,6BACA,4IACA,kBAAC,EAAD,KAAe,kBAAC,EAAD,OACf,kBAAC,EAAD,KAAe,kBAAC,EAAD,S,MC3ErBC,QAAQC,IAAI,iBCKZD,QAAQC,IAAI,iBAKZ,IAAMC,EAAOC,YAAW,CACtBC,MAAO,MAiDML,E,kDA3Cb,aAAe,IAAD,8BACZ,gBAwBFM,UAAY,WACVL,QAAQC,IAAI,QAxBZ,EAAKpB,MAAQ,CACXC,OAAO,GAHG,E,qDAOd,WAEEkB,QAAQC,IAAI,eACZK,aAAQ,WACNN,QAAQC,IAAI,OAAQC,EAAKE,Y,gCAI7B,WACEJ,QAAQC,IAAI,iB,+BAGd,WACEjB,KAAKC,SAAS,CACZH,OAAO,M,oBASX,WAEE,OADAkB,QAAQC,IAAI,cACJjB,KAAKH,MAAMC,MACjB,6CAEA,yBAAKyB,UAAU,OACb,kBAAC,EAAD,W,GAtCUhB,IAAMC,W,KCPJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.7cac2fdf.chunk.js","sourcesContent":["import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n  \n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    })\n    // You can also log error messages to an error reporting service here\n  }\n  \n  render() {\n    if (this.state.errorInfo) {\n      // Error path\n      return (\n        <div>\n          <h2>Something went wrong.</h2>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n    // Normally, just render children\n    return this.props.children;\n  }  \n}\n\nclass BuggyCounter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { counter: 0 };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  \n  handleClick() {\n    this.setState(({counter}) => ({\n      counter: counter + 1\n    }));\n  }\n  \n  render() {\n    if (this.state.counter === 5) {\n      // Simulate a JS error\n      throw new Error('I crashed!');\n    }\n    return <h1 onClick={this.handleClick}>{this.state.counter}</h1>;\n  }\n}\n\nfunction App() {\n  return (\n    <div>\n      <p>\n        <b>\n          This is an example of error boundaries in React 16.\n          <br /><br />\n          Click on the numbers to increase the counters.\n          <br />\n          The counter is programmed to throw when it reaches 5. This simulates a JavaScript error in a component.\n        </b>\n      </p>\n      <hr />\n      <ErrorBoundary>\n        <p>These two counters are inside the same error boundary. If one crashes, the error boundary will replace both of them.</p>\n        <BuggyCounter />\n        <BuggyCounter />\n      </ErrorBoundary>\n      <hr />\n      <p>These two counters are each inside of their own error boundary. So if one crashes, the other is not affected.</p>\n      <ErrorBoundary><BuggyCounter /></ErrorBoundary>\n      <ErrorBoundary><BuggyCounter /></ErrorBoundary>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState } from 'react';\nimport { action } from 'mobx';\nimport { useObserver } from 'mobx-react';\n\nconsole.log('import child2');\n// import { Button } from 'antd';\n\n// export default class Child2 extends React.Component {\n\n//   constructor() {\n//     super();\n//     this.state = {\n//       num: 0\n//     }\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <div>\n//           {this.props.count + this.state.num}\n//         </div>\n//         <Button\n//           onClick={() => {\n//             this.setState({\n//               num: 3\n//             })\n//             this.setState({\n//               num: 4\n//             })\n//             this.setState({\n//               num: 5\n//             })\n//           }}\n//         >\n//           Child2\n//         </Button>\n//       </div>\n//     )\n//   }\n// }\n\nfunction Child2(props) {\n\n  console.log('child2 render', props.data);\n  return useObserver(() => {\n    \n    return (\n      <div>\n        {React.cloneElement(props.children, {\n          value: props.value && props.value.value,\n          onChange: (e) => {\n            console.log('value', e.target.value);\n            props.value.value = e.target.value\n          },\n        })}\n      </div>\n    )\n  })\n}\n\n// @observer\n// class Child2 extends React.Component {\n\n//   componentDidMount() {\n//     console.log('child 2 mounted');\n//   }\n\n//   componentDidUpdate() {\n//     console.log('child2  updated');\n//   }\n\n//   render() {\n//     console.log('child 2 render');\n//     return (\n//       <div>\n//         {React.cloneElement(this.props.children, {\n//           value: this.props.value,\n//           onChange: this.props.onEvent\n//         })}\n//       </div>\n//     )\n//   }\n// }\n\n\nexport default Child2","import React, { useState, useEffect, useCallback } from 'react';\nimport { observable, autorun } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { Input } from 'antd';\n\nimport Child1 from './child1';\nimport Child2 from './child2';\nimport Child3 from './child3';\n\nconsole.log('import child1')\n\n// import { Button } from 'antd';\n// import { store } from './redux-jest';\n\nconst data = observable({\n  value: 111\n})\n\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      error: false,\n    }\n  }\n\n  componentDidMount() {\n\n    console.log('app mounted')\n    autorun(() => {\n      console.log('data', data.value);\n    })\n  }\n\n  componentDidUpdate() {\n    console.log('app updated')\n  }\n\n  componentDidCatch() {\n    this.setState({\n      error: true,\n    })\n  }\n\n  handleEnd = () => {\n    console.log('end')\n  }\n\n\n  render() {\n    console.log('app render')\n    return  this.state.error ? (\n      <div>sorry, error</div>\n    ) : (\n      <div className=\"App\">\n        <Child1/>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport App1 from './App1';\n// import TimeoutDemo from './timeout';\n// import { initJestDemo } from './redux-jest';\nimport * as serviceWorker from './serviceWorker';\n\n// initJestDemo();\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}